// Learn TypeScript:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/typescript/index.html
// Learn Attribute:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html
// Learn life-cycle callbacks:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html

const {ccclass, property} = cc._decorator;

import dispatcher from "./dispatcher"
import {EventType} from "./consts"
import word_guide_mgr from "./word_guide"
import word_xiao_mgr from "./word_xiao"
import word_chu_mgr from "./word_chu"
import word_gao_mgr from "./word_gao"
import word_four_mgr from "./word_four"
import word_six_mgr from "./word_six"
import wx_mgr from "./wx_wrapper"

@ccclass
export class client extends cc.Component {

    private init_flag: boolean = false;
    private lvl: number = 1;
    private cur_section: number = 1;
    private cur_word_idx: number = 0;
    private last_word_section: number = 0;   // max(last) word section
    private last_word_idx: number = 0; // max(last) word index
    private random_xiao_ary: Array<number> = [];
    private random_chu_ary: Array<number> = [];
    private random_gao_ary: Array<number> = [];
    private random_four_ary: Array<number> = [];
    private random_six_ary: Array<number> = [];

    constructor() {
        super();
    },

    init(): void {
        if (this.init_flag) {
            return;
        }
        
        this.init_flag = true;

        word_guide_mgr.init();
        word_xiao_mgr.init();
        word_chu_mgr.init();
        word_gao_mgr.init();
        word_four_mgr.init();
        word_six_mgr.init();

        let words_size_ary = [];
        words_size_ary.push(word_xiao_mgr.words_ary.length);
        words_size_ary.push(word_chu_mgr.words_ary.length);
        words_size_ary.push(word_gao_mgr.words_ary.length);
        words_size_ary.push(word_four_mgr.words_ary.length);
        words_size_ary.push(word_six_mgr.words_ary.length);
        wx_mgr.init(words_size_ary);

        this.init_random_ary();
    },

    init_random_ary(): void {
        this.init_xiao_random_ary();
        this.init_chu_random_ary();
        this.init_gao_random_ary();
        this.init_four_random_ary();
        this.init_six_random_ary();
    },

    get_random_range(min: number, max: number): number {  
        let range_value = max - min;  
        let rand_value = Math.random();  
        return (min + Math.round(rand_value * range_value));  
    },

    inited_finish(): boolean {
        if (!this.init_flag) {
            return false;
        }
        return wx_mgr.init_finish_flag;
    }

    share_game(): void {
        wx_mgr.share_game();
    },

    is_guide(): boolean {
        return wx_mgr.guide_flag;
    },

    set_guide_flag(): void {
        wx_mgr.update_guide_flag();
    }

    set_lvl(lvl: number): void {
        this.lvl = lvl;

        this.cur_section = this.get_history_section();

        let max_word_idx = this.get_config_word_idx();
        let len = 0;
        if (this.lvl == 1) {
            len = word_xiao_mgr.words_ary.length;
        }
        else if (this.lvl == 2) {
            len = word_chu_mgr.words_ary.length;
        }
        else if (this.lvl == 3) {
            len = word_gao_mgr.words_ary.length;
        }
        else if (this.lvl == 4) {
            len = word_four_mgr.words_ary.length;
        }
        else {
            len = word_six_mgr.words_ary.length;
        }
        this.last_word_section = Math.ceil(len / max_word_idx);
        this.last_word_idx = len - (this.last_word_section - 1) * max_word_idx;
        console.log("set lvl!", this.lvl, this.cur_section, this.last_word_section, this.last_word_idx);
    },
    
    get_lvl(): number {
        return this.lvl;
    },

    get_last_word_section(): number {
        return this.last_word_section;
    },

    get_last_word_idx(): number {
        return this.last_word_idx;
    },

    set_cur_section(section: number): void {
        this.cur_section = section;
    },

    get_cur_section(): number {
        return this.cur_section;
    },

    set_history_section(section: number): void {
        if (this.lvl == 1) {
            wx_mgr.history_section_1 = section;
        }
        else if (this.lvl == 2) {
            wx_mgr.history_section_2 = section;
        }
        else if (this.lvl == 3) {
            wx_mgr.history_section_3 = section;
        }
        else if (this.lvl == 4) {
            wx_mgr.history_section_4 = section;
        }
        else {
            wx_mgr.history_section_5 = section;
        }
    },

    get_history_section(): number {
        if (this.lvl == 1) {
            return wx_mgr.history_section_1;
        }
        else if (this.lvl == 2) {
            return wx_mgr.history_section_2;
        }
        else if (this.lvl == 3) {
            return wx_mgr.history_section_3;
        }
        else if (this.lvl == 4) {
            return wx_mgr.history_section_4;
        }
        else {
            return wx_mgr.history_section_5;
        }
    }

    set_cur_word_idx(idx: number): void {
        this.cur_word_idx = idx;
    },

    get_cur_word_idx(): number {
        return this.cur_word_idx;
    },

    get_max_word_idx(): number {
        if (this.is_guide()) {
            return word_guide_mgr.words_ary.length;
        }

        if (this.cur_section == this.last_word_section) {
            return this.last_word_idx;
        }
        else {
            return this.get_config_word_idx();
        }
    },

    get_config_word_idx(): number {
        return 5;
    },

    get_real_word_idx(idx: number): number {
        if (this.is_guide()) {
            return idx;
        }
        
        let param = this.get_config_word_idx();
        return (this.cur_section - 1) * param + idx;
    },

    set_word_pass(idx: number, flag: boolean): void {
        if (this.is_guide()) {
            return ;
        }

        let value  = flag ? '1' : '0';
        let replace_value = this.get_user_flag();
        let left_value = replace_value.substr(0, idx);
        let right_value = replace_value.substr(idx+1, replace_value.length - idx);
        replace_value = left_value + value + right_value;
        if (this.lvl == 1) {
            wx_mgr.user_flag_1 = replace_value;
        }
        else if (this.lvl == 2) {
            wx_mgr.user_flag_2 = replace_value;
        }
        else if (this.lvl == 3) {
            wx_mgr.user_flag_3 = replace_value;
        }
        else if (this.lvl == 4) {
            wx_mgr.user_flag_4 = replace_value;
        }
        else {
            wx_mgr.user_flag_5 = replace_value;
        }
    },

    is_word_pass(idx: number): boolean {
        if (this.is_guide()) {
            return true;
        }

        let user_flag = this.get_user_flag();
        let real_idx = this.get_real_word_idx(idx);
        return user_flag[real_idx] == '1';
    },

    get_current_pass_word_num(): number {
        if (this.is_guide()) {
            return word_guide_mgr.words_ary.length;
        }

        let pass_num = 0;
        let user_flag = this.get_user_flag();
        let max_num = this.get_config_word_idx();
        for (let idx=0; idx<max_num; ++idx) {
            let real_idx = this.get_real_word_idx(idx);
            if (user_flag[real_idx] == '1') {
                pass_num += 1;
            }
        }
        return pass_num;
    },

    get_total_pass_word_num(): number {
        let pass_num = 0;
        let user_flag = this.get_user_flag();
        for (let i=0; i<user_flag.length; ++i) {
            if (user_flag[i] == '1') {
                pass_num += 1;
            }
        }
        return pass_num;
    }

    get_user_flag(): string {
        if (this.lvl == 1) {
            return wx_mgr.user_flag_1;
        }
        else if (this.lvl == 2) {
            return wx_mgr.user_flag_2;
        }
        else if (this.lvl == 3) {
            return wx_mgr.user_flag_3;
        }
        else if (this.lvl == 4) {
            return wx_mgr.user_flag_4;
        }
        else {
            return wx_mgr.user_flag_5;
        }
    },

    get_word_info(word_idx: number, info_idx: number): string {
        if (this.is_guide()) {
            return word_guide_mgr.words_ary[word_idx][info_idx];
        }
        
        if (this.lvl == 1) {
            let real_idx = this.random_xiao_ary[word_idx];
            return word_xiao_mgr.words_ary[real_idx][info_idx];
        }
        else if (this.lvl == 2) {
            let real_idx = this.random_chu_ary[word_idx];
            return word_chu_mgr.words_ary[real_idx][info_idx];
        }
        else if (this.lvl == 3) {
            let real_idx = this.random_gao_ary[word_idx];
            return word_gao_mgr.words_ary[real_idx][info_idx];
        }
        else if (this.lvl == 4) {
            let real_idx = this.random_four_ary[word_idx];
            return word_four_mgr.words_ary[real_idx][info_idx];
        }
        else {
            let real_idx = this.random_six_ary[word_idx];
            return word_six_mgr.words_ary[real_idx][info_idx];
        }
    },

    save_user_info(): void {
        if (wx_mgr.init_finish_flag) {
            wx_mgr.save_cloud_value(this.lvl);
        }
    },

    init_xiao_random_ary(): void {
        let ary = [];
        ary.push([355, 6, 106, 185, 267, 139, 55, 232, 213, 206, 157, 383, 315, 192, 60, 153, 358, 102, 307, 389, 241, 295, 13, 214, 381, 111, 226, 164, 110, 390, 375, 230, 299, 95, 318, 3, 70, 216, 269, 0, 220, 277, 229, 9, 231, 104, 52, 22, 357, 114]);
        ary.push([283, 133, 50, 253, 249, 413, 263, 395, 369, 365, 334, 98, 143, 127, 215, 311, 66, 222, 202, 67, 79, 297, 27, 419, 147, 69, 407, 115, 154, 352, 301, 195, 235, 124, 177, 242, 17, 187, 314, 317, 140, 198, 410, 372, 84, 273, 62, 100, 103, 392]);
        ary.push([119, 228, 240, 188, 96, 340, 353, 83, 364, 71, 144, 248, 292, 80, 33, 252, 343, 171, 412, 44, 118, 285, 28, 336, 169, 85, 120, 183, 39, 43, 294, 11, 271, 38, 23, 293, 10, 197, 338, 323, 184, 259, 298, 34, 359, 300, 356, 337, 101, 37]);
        ary.push([217, 48, 221, 74, 14, 360, 121, 108, 174, 331, 275, 239, 309, 393, 155, 8, 289, 205, 396, 46, 224, 4, 196, 1, 367, 270, 86, 47, 345, 182, 304, 152, 417, 256, 237, 328, 261, 18, 186, 72, 24, 418, 223, 49, 363, 236, 97, 225, 25, 29]);
        ary.push([406, 278, 159, 123, 94, 105, 391, 234, 380, 312, 310, 45, 166, 325, 339, 59, 211, 78, 99, 125, 350, 126, 128, 320, 387, 15, 93, 136, 344, 386, 321, 148, 150, 91, 36, 254, 173, 414, 42, 19, 416, 251, 302, 322, 201, 57, 288, 63, 7, 266]);
        ary.push([342, 272, 244, 403, 81, 149, 415, 92, 351, 30, 210, 243, 421, 333, 176, 262, 308, 146, 327, 245, 366, 408, 362, 32, 361, 200, 162, 65, 199, 276, 401, 341, 87, 170, 420, 286, 373, 68, 316, 109, 400, 122, 138, 368, 281, 165, 31, 134, 58, 238]);
        ary.push([75, 189, 388, 40, 194, 405, 212, 178, 163, 21, 26, 376, 377, 313, 384, 268, 409, 181, 347, 219, 16, 56, 190, 208, 255, 88, 284, 290, 54, 132, 398, 319, 399, 265, 346, 35, 20, 161, 330, 172, 207, 142, 287, 209, 402, 250, 282, 89, 107, 204]);
        ary.push([175, 274, 394, 382, 117, 5, 158, 112, 168, 193, 82, 326, 303, 135, 180, 203, 246, 141, 129, 332, 349, 258, 12, 291, 374, 51, 156, 264, 151, 137, 227, 77, 404, 371, 160, 113, 218, 385, 324, 76, 378, 2, 279, 306, 233, 247, 329, 354, 130, 61]);
        ary.push([53, 305, 379, 280, 260, 145, 411, 191, 296, 90, 335, 257, 167, 179, 73, 348, 131, 64, 116, 41, 370, 397]);
        for (let i=0; i<ary.length; ++i)
        {
            for (let j=0; j<ary[i].length; ++j) {
                this.random_xiao_ary.push(ary[i][j]);
            }
        }
    },

    init_chu_random_ary(): void {
        let ary = [];
        ary.push([230, 192, 146, 55, 445, 126, 595, 105, 665, 447, 308, 407, 610, 35, 123, 628, 261, 195, 579, 714, 379, 232, 60, 125, 370, 645, 108, 724, 512, 63, 642, 696, 109, 368, 317, 720, 121, 306, 465, 325, 656, 691, 187, 333, 685, 226, 181, 316, 534, 320]);
        ary.push([603, 629, 215, 99, 44, 391, 602, 788, 753, 352, 410, 95, 670, 268, 453, 556, 245, 580, 438, 631, 643, 576, 131, 569, 679, 29, 9, 401, 68, 101, 555, 578, 607, 474, 651, 762, 766, 469, 709, 88, 635, 728, 376, 70, 318, 677, 263, 627, 38, 504]);
        ary.push([242, 658, 751, 705, 218, 191, 794, 328, 12, 820, 110, 614, 241, 21, 449, 253, 508, 802, 699, 142, 715, 292, 618, 500, 496, 473, 773, 733, 326, 33, 416, 760, 90, 353, 321, 377, 805, 716, 342, 178, 244, 552, 402, 609, 24, 301, 721, 65, 667, 421]);
        ary.push([367, 608, 734, 792, 400, 752, 621, 542, 390, 537, 772, 452, 646, 182, 681, 641, 210, 282, 107, 238, 272, 661, 490, 365, 807, 7, 66, 322, 385, 606, 309, 86, 593, 761, 819, 472, 82, 288, 113, 509, 769, 420, 211, 383, 680, 387, 666, 517, 119, 706]);
        ary.push([535, 520, 660, 674, 558, 201, 467, 790, 532, 57, 482, 130, 335, 324, 1, 61, 536, 11, 259, 286, 804, 515, 117, 598, 256, 718, 461, 533, 477, 611, 331, 767, 793, 305, 16, 296, 161, 811, 518, 106, 640, 231, 157, 180, 397, 164, 76, 712, 725, 708]);
        ary.push([52, 257, 163, 741, 64, 8, 513, 40, 528, 73, 300, 442, 37, 562, 729, 72, 630, 386, 550, 592, 160, 675, 476, 695, 634, 15, 413, 785, 104, 613, 93, 739, 137, 408, 393, 97, 14, 42, 455, 470, 759, 327, 529, 143, 169, 489, 498, 84, 303, 722]);
        ary.push([382, 3, 363, 570, 747, 694, 209, 346, 573, 216, 222, 585, 229, 384, 264, 213, 703, 551, 25, 750, 271, 430, 372, 396, 414, 334, 687, 647, 162, 521, 701, 730, 547, 683, 624, 557, 745, 247, 423, 127, 80, 612, 59, 0, 444, 183, 304, 394, 355, 406]);
        ary.push([821, 13, 638, 276, 755, 114, 41, 736, 158, 671, 273, 460, 54, 426, 765, 583, 782, 777, 682, 664, 451, 818, 348, 541, 23, 425, 311, 298, 711, 619, 153, 307, 433, 360, 523, 697, 434, 51, 297, 219, 435, 744, 786, 323, 584, 32, 356, 170, 770, 690]);
        ary.push([698, 374, 549, 497, 824, 653, 450, 597, 234, 310, 669, 118, 713, 617, 540, 543, 616, 258, 719, 358, 255, 798, 791, 138, 563, 294, 662, 403, 351, 144, 250, 478, 197, 409, 79, 812, 77, 636, 205, 462, 380, 102, 731, 502, 454, 574, 269, 787, 111, 503]);
        ary.push([133, 795, 147, 285, 591, 768, 692, 539, 145, 735, 763, 458, 173, 524, 554, 655, 227, 188, 464, 369, 723, 710, 796, 499, 441, 228, 254, 366, 519, 623, 530, 479, 471, 166, 776, 737, 395, 485, 559, 281, 626, 330, 668, 128, 349, 775, 364, 510, 492, 756]);
        ary.push([236, 778, 243, 480, 165, 278, 684, 240, 749, 5, 483, 418, 727, 783, 516, 567, 388, 525, 154, 463, 446, 237, 361, 732, 94, 239, 71, 339, 313, 577, 704, 185, 487, 814, 764, 49, 74, 362, 417, 67, 501, 171, 17, 69, 62, 678, 432, 252, 652, 58]);
        ary.push([299, 620, 212, 531, 526, 208, 494, 150, 436, 189, 295, 279, 186, 644, 4, 575, 267, 98, 289, 223, 568, 588, 582, 193, 411, 437, 378, 172, 34, 338, 214, 594, 424, 135, 347, 343, 654, 184, 565, 506, 251, 312, 774, 561, 743, 810, 75, 354, 260, 179]);
        ary.push([280, 702, 167, 459, 2, 28, 196, 275, 800, 291, 673, 176, 456, 560, 198, 151, 689, 419, 771, 484, 30, 168, 604, 224, 806, 373, 293, 639, 405, 39, 56, 663, 148, 522, 112, 780, 48, 428, 553, 136, 217, 649, 332, 18, 527, 600, 468, 134, 46, 808]);
        ary.push([47, 235, 277, 206, 596, 78, 27, 544, 6, 672, 657, 129, 91, 815, 415, 748, 202, 115, 822, 389, 329, 443, 429, 270, 440, 412, 122, 801, 717, 448, 564, 779, 87, 491, 83, 204, 381, 650, 688, 589, 746, 632, 81, 590, 813, 493, 648, 422, 742, 797]);
        ary.push([622, 10, 53, 757, 466, 155, 337, 274, 85, 314, 707, 344, 156, 177, 375, 488, 26, 152, 392, 248, 207, 486, 481, 439, 548, 45, 265, 149, 693, 781, 141, 341, 96, 507, 545, 290, 190, 139, 31, 199, 19, 817, 726, 336, 475, 538, 758, 120, 754, 345]);
        ary.push([116, 359, 340, 514, 581, 633, 140, 740, 371, 200, 700, 601, 427, 803, 546, 505, 495, 398, 132, 572, 399, 599, 262, 357, 36, 319, 103, 284, 571, 789, 625, 404, 50, 586, 43, 816, 615, 676, 233, 221, 287, 220, 175, 20, 315, 225, 246, 511, 22, 266]);
        ary.push([809, 784, 124, 92, 587, 100, 637, 249, 194, 89, 174, 605, 738, 431, 457, 799, 686, 203, 350, 302, 566, 823, 283, 659, 159]);
        for (let i=0; i<ary.length; ++i)
        {
            for (let j=0; j<ary[i].length; ++j) {
                this.random_chu_ary.push(ary[i][j]);
            }
        }
    },

    init_gao_random_ary(): void {
        let ary = [];
        ary.push([768, 130, 1107, 998, 873, 952, 349, 7, 514, 110, 808, 981, 1051, 890, 229, 825, 586, 909, 835, 333, 380, 690, 317, 1046, 458, 626, 582, 1268, 1044, 421, 116, 170, 1071, 104, 791, 1243, 481, 538, 379, 352, 20, 726, 1060, 628, 394, 11, 1115, 1087, 1237, 261]);
        ary.push([1235, 330, 565, 227, 1208, 311, 766, 948, 772, 479, 389, 465, 1158, 781, 283, 1077, 1070, 822, 505, 593, 676, 527, 320, 109, 504, 280, 273, 799, 682, 1186, 537, 912, 1286, 367, 1179, 127, 755, 643, 1272, 282, 526, 581, 1041, 689, 1240, 312, 288, 533, 759, 674]);
        ary.push([38, 200, 1226, 1090, 631, 1028, 285, 106, 1314, 450, 667, 1233, 1102, 1094, 711, 843, 1300, 1198, 1316, 1055, 784, 0, 1139, 786, 699, 118, 696, 1029, 1002, 1022, 300, 1020, 154, 987, 515, 1120, 370, 210, 651, 71, 780, 257, 1301, 1190, 765, 248, 185, 413, 976, 112]);
        ary.push([120, 393, 477, 179, 251, 414, 1285, 978, 1254, 177, 1032, 645, 359, 710, 646, 1025, 789, 1155, 445, 1113, 303, 874, 1034, 157, 1181, 775, 558, 633, 90, 1118, 443, 498, 796, 1021, 466, 343, 1245, 395, 307, 697, 524, 982, 366, 1313, 826, 963, 576, 513, 634, 1292]);
        ary.push([1059, 187, 161, 857, 190, 6, 666, 323, 298, 494, 1241, 532, 417, 599, 842, 668, 1199, 141, 1206, 314, 437, 921, 847, 1092, 877, 1239, 1098, 1176, 830, 347, 457, 1270, 361, 461, 907, 962, 717, 1101, 706, 173, 1076, 1099, 10, 519, 327, 95, 686, 459, 278, 292]);
        ary.push([602, 719, 653, 902, 486, 855, 944, 1079, 815, 574, 1169, 918, 117, 146, 1081, 779, 553, 368, 423, 448, 739, 1212, 168, 58, 546, 1075, 212, 660, 246, 121, 1213, 782, 134, 19, 805, 510, 573, 1253, 654, 301, 649, 233, 384, 47, 34, 879, 424, 1262, 353, 525]);
        ary.push([236, 5, 545, 21, 50, 693, 231, 977, 872, 32, 1290, 934, 591, 814, 761, 984, 695, 1170, 1318, 1143, 493, 859, 101, 218, 495, 856, 740, 603, 1244, 838, 852, 1215, 750, 1006, 297, 1247, 1288, 222, 96, 403, 65, 988, 683, 75, 1303, 1200, 211, 247, 309, 684]);
        ary.push([938, 35, 181, 351, 502, 930, 70, 78, 1250, 319, 350, 476, 942, 723, 840, 561, 1019, 559, 1209, 344, 1121, 658, 1097, 1082, 517, 406, 1182, 215, 1264, 899, 564, 705, 1045, 332, 795, 26, 89, 430, 1111, 1104, 167, 715, 1066, 896, 1123, 396, 1184, 1281, 103, 1065]);
        ary.push([1171, 756, 151, 655, 647, 182, 279, 509, 289, 801, 256, 148, 707, 656, 973, 219, 464, 551, 1174, 165, 577, 522, 1007, 1296, 920, 1236, 1219, 418, 1312, 204, 1146, 1275, 752, 648, 456, 1203, 797, 738, 925, 133, 511, 1015, 575, 892, 733, 74, 398, 124, 475, 336]);
        ary.push([1148, 274, 678, 1218, 804, 1251, 1126, 220, 716, 677, 579, 324, 1014, 221, 1089, 960, 268, 252, 326, 385, 253, 1173, 1083, 202, 657, 809, 24, 1024, 51, 1230, 552, 803, 1165, 339, 77, 8, 1106, 250, 1276, 923, 1023, 1205, 1152, 1086, 630, 82, 1271, 17, 1134, 534]);
        ary.push([119, 1189, 1036, 1150, 935, 1204, 1039, 1052, 230, 927, 751, 905, 939, 812, 1069, 284, 1091, 1220, 497, 568, 554, 1195, 748, 125, 463, 597, 369, 275, 589, 924, 374, 698, 269, 903, 901, 446, 936, 735, 484, 685, 138, 373, 29, 1061, 388, 618, 595, 1095, 85, 542]);
        ary.push([730, 383, 27, 1026, 1265, 375, 474, 1284, 107, 1000, 851, 277, 870, 49, 321, 158, 1274, 143, 496, 387, 1256, 2, 306, 1064, 965, 1252, 295, 259, 438, 642, 1302, 531, 999, 1289, 381, 571, 1013, 700, 957, 435, 777, 308, 1157, 243, 1040, 763, 453, 1227, 152, 81]);
        ary.push([1310, 364, 1074, 40, 946, 1031, 1130, 640, 86, 943, 472, 1168, 911, 1042, 1001, 611, 900, 213, 665, 180, 56, 482, 1228, 613, 906, 737, 722, 335, 1216, 80, 14, 22, 919, 184, 404, 1166, 439, 785, 245, 560, 806, 704, 1010, 607, 1116, 360, 958, 186, 42, 680]);
        ary.push([1038, 13, 623, 342, 745, 708, 488, 276, 888, 111, 313, 783, 858, 260, 426, 1291, 1122, 713, 1073, 941, 329, 1110, 390, 1221, 703, 585, 521, 345, 189, 225, 1100, 169, 128, 1135, 281, 1248, 831, 1140, 893, 762, 478, 249, 507, 1225, 1062, 635, 980, 1067, 94, 1008]);
        ary.push([452, 712, 483, 1149, 861, 1278, 341, 386, 61, 1114, 959, 644, 1124, 991, 238, 147, 33, 549, 794, 536, 64, 747, 688, 868, 709, 887, 401, 996, 1103, 444, 174, 270, 266, 508, 734, 692, 492, 622, 880, 136, 217, 867, 608, 885, 850, 224, 810, 771, 108, 792]);
        ary.push([659, 304, 1258, 566, 864, 267, 979, 754, 305, 1153, 1078, 972, 760, 265, 500, 860, 550, 1136, 757, 1297, 469, 441, 894, 1242, 328, 1269, 891, 609, 562, 239, 97, 833, 1255, 742, 1201, 263, 25, 407, 163, 60, 216, 544, 52, 961, 530, 1119, 485, 376, 1161, 1068]);
        ary.push([286, 1105, 1137, 84, 610, 1084, 691, 449, 176, 62, 155, 1117, 363, 123, 570, 881, 841, 1057, 1159, 897, 391, 433, 296, 744, 1234, 663, 767, 541, 57, 951, 132, 1306, 702, 1293, 584, 721, 866, 434, 1222, 192, 447, 201, 701, 724, 1277, 337, 627, 1229, 150, 933]);
        ary.push([1162, 614, 992, 1295, 1160, 790, 1080, 949, 1005, 196, 1053, 490, 556, 807, 773, 371, 354, 340, 1072, 191, 501, 989, 567, 563, 30, 590, 875, 1147, 115, 605, 454, 829, 46, 672, 1261, 172, 228, 985, 913, 460, 758, 1259, 535, 1299, 1164, 436, 408, 671, 926, 1317]);
        ary.push([769, 1231, 149, 237, 1196, 348, 480, 886, 1197, 144, 73, 432, 156, 153, 489, 664, 1156, 971, 53, 964, 1210, 451, 928, 63, 1012, 1093, 232, 1049, 884, 617, 969, 990, 578, 572, 1054, 1096, 813, 629, 1192, 412, 235, 255, 44, 1311, 102, 516, 79, 1257, 193, 137]);
        ary.push([405, 632, 1109, 1131, 986, 1108, 1112, 974, 776, 1035, 39, 1138, 916, 310, 932, 287, 331, 883, 159, 175, 59, 315, 1267, 917, 557, 904, 410, 876, 1180, 499, 425, 741, 1263, 1191, 290, 606, 824, 862, 854, 76, 945, 194, 846, 673, 983, 1127, 427, 139, 242, 131]);
        ary.push([612, 129, 1177, 731, 720, 770, 358, 1315, 725, 114, 727, 422, 431, 620, 291, 878, 624, 365, 639, 848, 749, 171, 1266, 637, 679, 338, 837, 774, 197, 966, 975, 68, 1223, 997, 587, 1232, 55, 377, 346, 1163, 1167, 994, 827, 48, 638, 206, 931, 778, 787, 596]);
        ary.push([950, 462, 262, 811, 528, 910, 397, 616, 294, 99, 967, 226, 402, 1142, 543, 583, 234, 240, 523, 178, 72, 188, 92, 798, 205, 399, 788, 1304, 429, 69, 45, 518, 145, 1188, 1193, 621, 1033, 135, 1056, 1027, 1063, 652, 844, 1249, 764, 956, 865, 491, 1283, 208]);
        ary.push([714, 853, 1260, 1214, 641, 594, 473, 512, 820, 471, 1151, 953, 882, 223, 183, 87, 325, 736, 817, 1224, 411, 98, 1004, 1211, 947, 718, 487, 455, 258, 18, 357, 503, 1308, 1178, 36, 31, 416, 615, 839, 1003, 929, 993, 1287, 1154, 1050, 694, 1043, 1129, 793, 1016]);
        ary.push([322, 914, 1185, 569, 37, 592, 871, 318, 1048, 1009, 819, 636, 1294, 547, 162, 1030, 126, 1307, 743, 203, 1058, 195, 845, 540, 625, 198, 4, 442, 1088, 122, 12, 970, 83, 675, 1175, 889, 372, 588, 669, 3, 898, 88, 302, 1273, 1194, 415, 922, 428, 746, 1018]);
        ary.push([419, 355, 1017, 382, 732, 207, 619, 1309, 241, 100, 362, 1047, 995, 955, 823, 802, 670, 392, 43, 271, 728, 1125, 16, 254, 1279, 378, 834, 244, 272, 1305, 1238, 1183, 1011, 356, 1207, 1187, 1132, 15, 470, 468, 662, 1141, 1085, 821, 67, 604, 409, 895, 41, 869]);
        ary.push([199, 54, 832, 1282, 93, 828, 548, 299, 836, 650, 729, 506, 1298, 440, 1, 816, 28, 1145, 1202, 166, 520, 1128, 954, 681, 66, 264, 687, 400, 908, 818, 1246, 1037, 467, 209, 160, 529, 316, 1133, 9, 598, 293, 142, 91, 1217, 849, 164, 214, 1280, 600, 113]);
        ary.push([105, 940, 555, 1144, 863, 334, 539, 968, 915, 1172, 753, 601, 580, 140, 661, 800, 420, 23, 937]);
        for (let i=0; i<ary.length; ++i)
        {
            for (let j=0; j<ary[i].length; ++j) {
                this.random_gao_ary.push(ary[i][j]);
            }
        }
    },

    init_four_random_ary(): void {
        let ary = [];
        ary.push([1044, 865, 1364, 686, 766, 697, 1443, 50, 1404, 66, 1296, 1054, 706, 393, 137, 8, 482, 872, 774, 754, 219, 1116, 1165, 1169, 373, 1229, 1389, 108, 1094, 1199, 1174, 1210, 384, 132, 369, 107, 953, 290, 910, 479, 1416, 1331, 177, 720, 0, 618, 1013, 1435, 1129, 691]);
        ary.push([490, 210, 489, 534, 1088, 155, 1379, 197, 1162, 1297, 1209, 288, 252, 394, 1405, 418, 1055, 1137, 1348, 138, 1214, 1241, 715, 1179, 621, 580, 719, 297, 1344, 954, 319, 352, 9, 410, 169, 863, 916, 92, 154, 298, 188, 1239, 924, 750, 476, 1059, 889, 761, 1228, 942]);
        ary.push([83, 514, 881, 1428, 573, 492, 647, 972, 1361, 1017, 773, 51, 1218, 1190, 24, 1160, 38, 616, 951, 254, 358, 1462, 238, 665, 624, 293, 69, 292, 738, 1187, 411, 202, 787, 1390, 1161, 1091, 1456, 1424, 700, 874, 1002, 387, 931, 966, 72, 523, 244, 1378, 979, 308]);
        ary.push([98, 1046, 96, 414, 243, 1375, 311, 1145, 912, 775, 331, 974, 1207, 716, 1076, 895, 1376, 195, 216, 1421, 1463, 537, 110, 160, 1203, 99, 803, 1100, 1081, 1080, 44, 559, 722, 826, 1363, 362, 1064, 561, 360, 1308, 474, 334, 1144, 847, 843, 234, 1314, 512, 1283, 1052]);
        ary.push([300, 224, 1320, 1360, 374, 1414, 286, 1010, 1061, 167, 1444, 460, 751, 1048, 837, 1261, 976, 500, 390, 712, 789, 1270, 731, 1402, 772, 1231, 1148, 1240, 131, 1121, 121, 558, 240, 190, 1016, 142, 1452, 378, 735, 994, 880, 220, 1461, 485, 1109, 1130, 1432, 1071, 688, 724]);
        ary.push([547, 919, 103, 27, 41, 457, 846, 909, 541, 515, 388, 1219, 486, 413, 111, 1277, 1185, 1197, 585, 1095, 491, 342, 805, 544, 639, 845, 1159, 670, 830, 484, 501, 1032, 236, 85, 565, 1045, 661, 1412, 1454, 68, 348, 511, 641, 1249, 399, 415, 604, 315, 1083, 1186]);
        ary.push([658, 322, 158, 1399, 529, 627, 1273, 1167, 1400, 765, 1307, 926, 969, 255, 1204, 962, 653, 539, 1233, 679, 401, 449, 990, 1140, 1310, 1264, 667, 1237, 118, 705, 75, 807, 1189, 633, 214, 225, 1418, 1151, 1381, 600, 257, 1047, 313, 901, 1449, 829, 913, 7, 1321, 1374]);
        ary.push([1149, 950, 1075, 524, 439, 1024, 301, 610, 417, 860, 496, 1325, 379, 513, 1351, 163, 929, 253, 391, 763, 191, 1386, 242, 1352, 528, 477, 820, 508, 503, 113, 56, 959, 681, 998, 251, 90, 1316, 629, 171, 1117, 1350, 854, 1098, 70, 1222, 1078, 1271, 699, 465, 376]);
        ary.push([203, 235, 554, 662, 278, 891, 1371, 896, 16, 328, 1211, 1004, 187, 914, 1200, 893, 675, 1447, 1074, 392, 1188, 832, 1026, 1028, 215, 263, 939, 230, 94, 868, 804, 302, 1012, 451, 1175, 350, 844, 574, 802, 299, 1234, 377, 588, 923, 1172, 488, 354, 1225, 54, 867]);
        ary.push([338, 1434, 1278, 74, 617, 275, 1135, 1370, 1015, 432, 733, 466, 556, 312, 782, 333, 1319, 218, 928, 741, 463, 612, 1138, 504, 552, 196, 1092, 1156, 470, 442, 1430, 883, 1338, 1014, 995, 944, 958, 1335, 145, 1306, 678, 873, 330, 986, 625, 922, 227, 12, 1143, 1458]);
        ary.push([495, 86, 1451, 1442, 336, 134, 1332, 419, 777, 848, 144, 483, 927, 548, 271, 535, 385, 1343, 877, 744, 1003, 1110, 448, 368, 1339, 684, 164, 1267, 811, 840, 575, 1073, 963, 140, 591, 398, 885, 1347, 198, 127, 1176, 260, 1349, 664, 890, 1021, 310, 359, 921, 1097]);
        ary.push([964, 732, 749, 599, 353, 551, 563, 461, 1425, 1068, 517, 1408, 506, 53, 792, 3, 710, 364, 834, 1141, 940, 663, 786, 425, 422, 587, 825, 1023, 407, 57, 20, 1201, 1056, 888, 1089, 11, 1301, 1192, 1226, 835, 1215, 1150, 1123, 861, 200, 1007, 509, 1330, 427, 77]);
        ary.push([58, 1127, 1104, 1274, 406, 1134, 1382, 920, 1084, 1422, 366, 480, 81, 572, 809, 88, 452, 1018, 1236, 1257, 226, 204, 1419, 576, 80, 904, 59, 458, 295, 440, 412, 737, 1038, 1103, 1282, 767, 1392, 560, 1051, 1448, 102, 6, 1221, 400, 1407, 770, 1131, 459, 985, 67]);
        ary.push([1223, 184, 437, 55, 839, 975, 636, 1111, 571, 1245, 853, 13, 267, 546, 189, 932, 347, 553, 668, 631, 1377, 1427, 842, 1039, 207, 779, 997, 1253, 1220, 824, 136, 1299, 1158, 721, 1001, 862, 1329, 622, 147, 903, 717, 157, 542, 983, 232, 1105, 810, 1128, 475, 1040]);
        ary.push([982, 530, 747, 39, 583, 1066, 23, 5, 194, 429, 756, 1423, 100, 133, 129, 521, 97, 1262, 221, 752, 502, 186, 718, 540, 345, 79, 1194, 683, 309, 988, 1380, 344, 166, 516, 1368, 146, 375, 1196, 493, 992, 355, 555, 1107, 1255, 1114, 977, 261, 798, 78, 469]);
        ary.push([1019, 711, 980, 713, 527, 1303, 1263, 871, 1164, 233, 708, 855, 2, 395, 170, 104, 1413, 1193, 884, 907, 743, 247, 728, 71, 105, 596, 481, 849, 704, 736, 1099, 1459, 902, 397, 634, 801, 945, 454, 329, 1393, 181, 941, 841, 1093, 180, 709, 1077, 305, 365, 1155]);
        ary.push([742, 52, 1300, 673, 32, 1280, 1318, 906, 1086, 19, 1294, 84, 532, 1395, 265, 248, 1367, 1292, 1178, 623, 370, 346, 436, 1431, 185, 337, 730, 1302, 445, 1406, 349, 409, 82, 162, 223, 222, 165, 156, 545, 875, 229, 655, 43, 1440, 764, 112, 372, 1345, 933, 1202]);
        ary.push([967, 822, 209, 1230, 444, 1043, 685, 172, 858, 249, 487, 435, 816, 817, 1070, 900, 1284, 246, 819, 970, 314, 611, 778, 318, 1359, 325, 1256, 915, 1191, 25, 1326, 852, 106, 269, 1112, 15, 1252, 402, 981, 1438, 965, 1246, 1355, 130, 1122, 531, 1049, 356, 1288, 598]);
        ary.push([161, 1397, 543, 649, 1315, 304, 174, 424, 327, 788, 148, 274, 757, 955, 1082, 173, 821, 22, 727, 1259, 115, 1417, 472, 605, 332, 1313, 1041, 1295, 1087, 619, 1322, 510, 1279, 1437, 911, 363, 1281, 143, 505, 321, 925, 1170, 64, 973, 960, 597, 208, 1118, 237, 654]);
        ary.push([748, 897, 1025, 660, 650, 175, 908, 791, 285, 1163, 1020, 1227, 1450, 341, 1120, 567, 316, 416, 1000, 37, 199, 320, 47, 930, 947, 603, 1008, 1057, 866, 73, 291, 793, 776, 579, 447, 46, 628, 423, 582, 335, 1152, 1460, 607, 361, 570, 878, 652, 609, 637, 1060]);
        ary.push([760, 836, 1212, 404, 1328, 1401, 119, 593, 1258, 1366, 1286, 1289, 1235, 151, 1224, 1157, 729, 1124, 815, 918, 608, 178, 455, 431, 784, 968, 549, 948, 287, 1323, 1373, 578, 382, 1108, 205, 1053, 1290, 262, 26, 1457, 692, 14, 93, 1096, 153, 533, 35, 279, 892, 856]);
        ary.push([383, 10, 150, 1009, 564, 1133, 790, 201, 538, 1139, 674, 1356, 759, 211, 526, 1250, 49, 690, 139, 206, 1396, 794, 651, 60, 869, 381, 296, 1272, 946, 827, 601, 283, 217, 613, 258, 859, 677, 273, 894, 63, 1269, 280, 1251, 62, 179, 1067, 1265, 615, 259, 1244]);
        ary.push([635, 428, 687, 65, 745, 468, 1205, 420, 18, 1342, 1341, 40, 386, 17, 324, 1394, 128, 935, 371, 957, 256, 357, 1334, 1037, 584, 125, 1242, 1029, 34, 1365, 1033, 1287, 4, 595, 1232, 620, 518, 1333, 1101, 1409, 141, 799, 590, 1388, 87, 405, 693, 494, 1327, 213]);
        ary.push([28, 806, 367, 31, 1206, 1072, 648, 453, 937, 642, 408, 1171, 813, 1433, 557, 272, 522, 898, 707, 499, 1337, 971, 592, 270, 550, 999, 1011, 702, 1445, 606, 1410, 644, 771, 882, 1384, 1411, 1385, 808, 21, 467, 95, 1126, 698, 1455, 602, 456, 250, 1298, 519, 122]);
        ary.push([396, 594, 446, 282, 812, 577, 1453, 76, 1119, 1403, 434, 1062, 991, 943, 1353, 152, 441, 864, 123, 949, 36, 857, 740, 657, 987, 1065, 101, 769, 91, 781, 1183, 755, 1030, 936, 176, 956, 1391, 1354, 638, 1420, 1102, 473, 689, 42, 850, 443, 264, 762, 120, 1285]);
        ary.push([450, 1166, 192, 1079, 703, 193, 800, 989, 1415, 351, 1153, 326, 1340, 870, 1006, 568, 1309, 666, 339, 1441, 1181, 183, 694, 993, 1125, 1346, 1, 886, 879, 168, 996, 1362, 478, 626, 159, 1195, 1266, 676, 289, 1268, 228, 323, 780, 303, 389, 701, 838, 426, 471, 938]);
        ary.push([1248, 343, 978, 126, 245, 569, 1317, 1357, 961, 1216, 917, 643, 306, 307, 669, 1238, 818, 1036, 430, 61, 714, 680, 536, 725, 1058, 1387, 785, 682, 1050, 114, 33, 828, 1243, 1198, 814, 124, 1429, 1426, 1383, 734, 433, 1069, 1372, 1063, 212, 462, 231, 340, 566, 1031]);
        ary.push([1312, 833, 899, 1147, 768, 586, 1132, 29, 645, 1336, 135, 30, 182, 614, 562, 934, 831, 1254, 266, 1446, 671, 1005, 403, 797, 823, 1291, 1311, 116, 1177, 1180, 952, 239, 498, 1208, 887, 438, 581, 1213, 497, 646, 241, 758, 1136, 1398, 695, 1022, 1305, 1027, 421, 48]);
        ary.push([45, 796, 1146, 1275, 795, 109, 520, 723, 1115, 1304, 525, 317, 656, 746, 1358, 1090, 672, 1276, 1260, 284, 1184, 1369, 1439, 1324, 905, 589, 1113, 1293, 851, 117, 876, 1173, 1085, 464, 1154, 1436, 1034, 984, 753, 632, 739, 1217, 640, 281, 630, 276, 1106, 783, 659, 1035]);
        ary.push([696, 268, 149, 277, 1247, 380, 1142, 507, 294, 89, 1182, 726, 1042, 1168]);
        for (let i=0; i<ary.length; ++i)
        {
            for (let j=0; j<ary[i].length; ++j) {
                this.random_four_ary.push(ary[i][j]);
            }
        }
    },

    init_six_random_ary(): void {
        let ary = [];
        ary.push([676, 592, 21, 7, 139, 1045, 1160, 803, 17, 828, 573, 917, 261, 1241, 291, 591, 121, 588, 1036, 334, 715, 888, 184, 1233, 604, 646, 514, 373, 459, 180, 314, 1164, 120, 1234, 1154, 272, 38, 232, 934, 603, 1125, 626, 219, 1213, 977, 1220, 482, 29, 1265, 361]);
        ary.push([210, 385, 286, 685, 104, 318, 125, 972, 285, 999, 64, 437, 850, 963, 717, 1209, 1070, 149, 1080, 222, 327, 602, 423, 138, 892, 854, 46, 479, 115, 710, 322, 79, 796, 750, 433, 217, 1027, 1191, 745, 19, 1172, 493, 670, 1108, 759, 692, 1052, 402, 354, 34]);
        ary.push([1198, 612, 1235, 251, 937, 628, 680, 601, 1053, 447, 788, 150, 181, 665, 351, 950, 501, 544, 288, 651, 413, 771, 31, 1199, 55, 1048, 623, 325, 214, 868, 837, 476, 84, 1122, 350, 560, 860, 218, 472, 428, 396, 770, 1240, 320, 1170, 608, 58, 1013, 970, 902]);
        ary.push([853, 133, 896, 486, 925, 257, 1000, 955, 489, 419, 367, 108, 124, 394, 1203, 887, 590, 883, 952, 1275, 229, 80, 336, 1266, 1161, 830, 1031, 359, 858, 246, 553, 802, 1110, 791, 1236, 954, 618, 543, 686, 215, 824, 520, 829, 736, 1195, 886, 706, 426, 916, 789]);
        ary.push([534, 767, 28, 1144, 960, 168, 826, 1200, 228, 701, 600, 1141, 30, 496, 805, 399, 530, 1006, 978, 148, 1114, 511, 1028, 36, 698, 24, 776, 1169, 299, 504, 1183, 234, 546, 624, 1093, 253, 638, 271, 208, 658, 714, 1259, 743, 668, 509, 157, 494, 1204, 405, 891]);
        ary.push([42, 102, 1011, 431, 966, 331, 795, 1001, 1278, 211, 258, 1272, 280, 787, 216, 744, 1182, 429, 103, 1273, 611, 636, 910, 851, 711, 3, 616, 453, 83, 1243, 390, 107, 395, 311, 525, 177, 772, 129, 523, 984, 957, 330, 840, 189, 1102, 1129, 176, 1216, 274, 1112]);
        ary.push([1051, 739, 566, 1034, 1136, 1238, 151, 474, 1207, 1041, 709, 1089, 432, 693, 449, 581, 262, 975, 203, 1010, 81, 355, 348, 462, 617, 473, 578, 300, 332, 724, 1145, 606, 195, 502, 962, 393, 377, 172, 576, 313, 374, 1043, 1021, 757, 778, 492, 1065, 281, 1222, 303]);
        ary.push([619, 160, 936, 677, 307, 814, 73, 267, 976, 729, 773, 987, 96, 1130, 491, 305, 469, 806, 26, 207, 88, 907, 468, 452, 1092, 1049, 360, 869, 111, 998, 323, 945, 99, 1019, 392, 820, 329, 593, 1184, 78, 1004, 11, 914, 224, 760, 986, 1193, 527, 1121, 1107]);
        ary.push([53, 924, 2, 4, 44, 782, 1168, 119, 859, 333, 130, 223, 1064, 347, 1217, 1029, 866, 294, 198, 589, 32, 731, 295, 634, 369, 163, 675, 1069, 304, 885, 1255, 252, 439, 738, 552, 239, 497, 697, 792, 863, 926, 155, 434, 86, 297, 644, 967, 941, 1143, 583]);
        ary.push([894, 848, 1087, 20, 268, 278, 1105, 569, 464, 1250, 995, 852, 254, 1040, 1020, 1219, 146, 647, 226, 13, 9, 518, 1251, 135, 839, 240, 76, 1253, 865, 607, 264, 1189, 183, 461, 522, 158, 946, 515, 1244, 154, 882, 370, 695, 470, 1257, 153, 754, 171, 1007, 1133]);
        ary.push([849, 641, 1242, 1117, 655, 1178, 140, 536, 380, 672, 0, 187, 52, 1074, 343, 282, 1186, 825, 904, 174, 621, 1059, 388, 97, 537, 769, 69, 1005, 383, 605, 60, 519, 166, 1068, 50, 199, 747, 1151, 763, 89, 243, 12, 1079, 319, 979, 169, 700, 40, 387, 255]);
        ary.push([1231, 310, 1038, 14, 944, 458, 1025, 344, 293, 1165, 512, 1226, 206, 190, 587, 951, 1060, 875, 480, 708, 204, 555, 43, 873, 401, 1261, 631, 35, 1150, 342, 507, 137, 1146, 622, 455, 1042, 132, 417, 1218, 931, 136, 363, 531, 127, 425, 85, 1212, 752, 93, 832]);
        ary.push([563, 337, 1249, 679, 503, 418, 182, 867, 312, 874, 691, 939, 406, 382, 968, 929, 807, 648, 247, 167, 707, 100, 227, 505, 598, 545, 923, 430, 580, 287, 632, 126, 384, 75, 928, 372, 62, 316, 1090, 559, 66, 961, 1248, 421, 142, 1177, 1149, 101, 366, 475]);
        ary.push([1071, 713, 746, 23, 993, 610, 338, 427, 438, 1239, 653, 117, 645, 609, 1082, 90, 48, 242, 41, 969, 912, 10, 467, 1098, 897, 1062, 704, 283, 1134, 1140, 1057, 723, 49, 456, 442, 1106, 613, 662, 510, 1058, 371, 666, 881, 59, 718, 1128, 270, 876, 810, 554]);
        ary.push([768, 92, 249, 1015, 1035, 1033, 1099, 728, 444, 77, 1118, 811, 991, 584, 152, 1237, 488, 716, 324, 276, 905, 1055, 720, 871, 6, 857, 870, 639, 532, 1262, 194, 51, 780, 290, 535, 506, 516, 477, 985, 1075, 1148, 1076, 82, 909, 1173, 1201, 483, 162, 317, 1153]);
        ary.push([440, 911, 238, 982, 39, 1224, 669, 918, 422, 170, 231, 620, 95, 353, 777, 72, 843, 1208, 913, 407, 557, 106, 915, 671, 1018, 818, 235, 213, 775, 197, 935, 835, 1022, 1111, 1139, 1, 786, 109, 335, 375, 688, 725, 846, 349, 131, 263, 689, 1264, 141, 321]);
        ary.push([237, 411, 705, 256, 1179, 799, 147, 988, 225, 1109, 1009, 113, 485, 652, 682, 627, 404, 1056, 202, 642, 1228, 1119, 1158, 800, 416, 414, 656, 128, 965, 358, 302, 500, 633, 597, 989, 221, 879, 1113, 721, 758, 981, 908, 948, 362, 663, 526, 400, 699, 71, 577]);
        ary.push([1181, 1210, 517, 735, 990, 365, 91, 899, 340, 112, 1023, 1104, 983, 289, 809, 740, 819, 1096, 567, 33, 339, 659, 1171, 47, 381, 1194, 376, 94, 389, 45, 248, 783, 971, 1230, 209, 5, 1097, 549, 159, 996, 571, 1073, 521, 890, 513, 1066, 906, 454, 1126, 732]);
        ary.push([1084, 443, 947, 1063, 220, 8, 1083, 827, 1166, 625, 541, 448, 441, 1185, 790, 794, 751, 368, 296, 558, 640, 781, 266, 1047, 1247, 1260, 398, 188, 565, 1012, 1245, 556, 749, 1091, 201, 804, 341, 1131, 1159, 930, 683, 1054, 161, 1227, 1156, 690, 1072, 889, 22, 742]);
        ary.push([831, 1176, 845, 861, 586, 145, 63, 301, 815, 1175, 277, 244, 1061, 498, 164, 116, 471, 816, 833, 56, 893, 1081, 173, 445, 134, 110, 1095, 595, 1078, 275, 1017, 70, 250, 1225, 898, 356, 733, 1267, 755, 997, 410, 574, 562, 660, 495, 1229, 309, 766, 661, 538]);
        ary.push([994, 98, 855, 397, 424, 1258, 391, 292, 1086, 409, 306, 1190, 490, 940, 478, 1188, 730, 594, 57, 18, 420, 694, 900, 719, 1147, 465, 844, 114, 822, 539, 1276, 457, 245, 1270, 415, 68, 529, 25, 284, 813, 156, 834, 748, 551, 1016, 884, 901, 1067, 236, 315]);
        ary.push([797, 460, 37, 67, 1205, 1187, 185, 192, 667, 230, 528, 308, 1269, 1180, 687, 1157, 657, 673, 508, 575, 1127, 943, 54, 599, 974, 408, 123, 737, 105, 200, 412, 87, 877, 903, 572, 1115, 122, 1279, 379, 1032, 895, 1123, 269, 524, 481, 386, 179, 958, 326, 779]);
        ary.push([550, 1223, 561, 785, 1277, 938, 1215, 298, 191, 836, 1120, 279, 1256, 1014, 450, 1024, 980, 143, 1263, 674, 346, 582, 1196, 681, 741, 1124, 241, 1271, 328, 1268, 212, 435, 1174, 205, 1101, 808, 463, 487, 1037, 678, 1206, 484, 16, 1155, 1142, 872, 841, 178, 1162, 533]);
        ary.push([726, 696, 446, 61, 973, 927, 765, 1232, 1116, 784, 74, 727, 922, 862, 540, 992, 629, 643, 1254, 812, 864, 761, 1138, 842, 847, 1202, 233, 1274, 1163, 921, 953, 548, 570, 1214, 403, 364, 932, 436, 933, 1026, 259, 547, 959, 919, 1030, 734, 260, 838, 684, 1044]);
        ary.push([756, 1192, 942, 118, 1046, 654, 499, 1100, 1167, 568, 956, 949, 798, 880, 964, 753, 1103, 1152, 466, 774, 823, 793, 703, 762, 1246, 764, 1077, 265, 564, 585, 144, 27, 1085, 650, 1088, 1221, 542, 65, 1132, 856, 722, 635, 451, 1050, 801, 664, 821, 165, 273, 712]);
        ary.push([1197, 1039, 1137, 579, 1094, 378, 1008, 357, 1003, 637, 186, 702, 196, 175, 649, 817, 615, 1002, 614, 352, 193, 920, 596, 345, 15, 878, 630, 1252, 1135, 1211]);
        for (let i=0; i<ary.length; ++i)
        {
            for (let j=0; j<ary[i].length; ++j) {
                this.random_six_ary.push(ary[i][j]);
            }
        }
    },
}

var client_mgr = new client();
export default client_mgr; 
